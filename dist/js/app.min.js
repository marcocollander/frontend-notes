"use strict";function _toConsumableArray(e){return _arrayWithoutHoles(e)||_iterableToArray(e)||_unsupportedIterableToArray(e)||_nonIterableSpread()}function _nonIterableSpread(){throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}function _iterableToArray(e){if("undefined"!=typeof Symbol&&null!=e[Symbol.iterator]||null!=e["@@iterator"])return Array.from(e)}function _arrayWithoutHoles(e){if(Array.isArray(e))return _arrayLikeToArray(e)}function _createForOfIteratorHelper(e,t){var r="undefined"!=typeof Symbol&&e[Symbol.iterator]||e["@@iterator"];if(!r){if(Array.isArray(e)||(r=_unsupportedIterableToArray(e))||t&&e&&"number"==typeof e.length){r&&(e=r);var a=0,t=function(){};return{s:t,n:function(){return a>=e.length?{done:!0}:{done:!1,value:e[a++]}},e:function(e){throw e},f:t}}throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}var n,o=!0,l=!1;return{s:function(){r=r.call(e)},n:function(){var e=r.next();return o=e.done,e},e:function(e){l=!0,n=e},f:function(){try{o||null==r.return||r.return()}finally{if(l)throw n}}}}function _unsupportedIterableToArray(e,t){if(e){if("string"==typeof e)return _arrayLikeToArray(e,t);var r=Object.prototype.toString.call(e).slice(8,-1);return"Map"===(r="Object"===r&&e.constructor?e.constructor.name:r)||"Set"===r?Array.from(e):"Arguments"===r||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(r)?_arrayLikeToArray(e,t):void 0}}function _arrayLikeToArray(e,t){(null==t||t>e.length)&&(t=e.length);for(var r=0,a=new Array(t);r<t;r++)a[r]=e[r];return a}var nav=document.querySelector(".nav"),btn=document.querySelector(".bar__btn-icon");btn.addEventListener("click",function(){nav.classList.toggle("nav--active")}),nav.addEventListener("click",function(){nav.classList.toggle("nav--active")});var optArticleSelector=".post",optTitleSelector=".post__title",optTitleListSelector=".titles",optArticleTagsSelector=".post__tags .list",optArticleAuthorSelector=".post__author";function generateTitleLinks(){var e,t=0<arguments.length&&void 0!==arguments[0]?arguments[0]:"",r=document.querySelector(optTitleListSelector),a=r.innerHTML="",n=_createForOfIteratorHelper(document.querySelectorAll(optArticleSelector+t));try{for(n.s();!(e=n.n()).done;){var o=e.value,l=o.getAttribute("id"),c=o.querySelector(optTitleSelector).innerHTML;a+='<li><a href="#'.concat(l,'"><span>').concat(c,"</span></a></li>")}}catch(e){n.e(e)}finally{n.f()}r.innerHTML=a}function titleClickHandler(e){e.preventDefault();var t,r=_createForOfIteratorHelper(document.querySelectorAll(".titles a.active"));try{for(r.s();!(t=r.n()).done;)t.value.classList.remove("active")}catch(e){r.e(e)}finally{r.f()}this.classList.add("active");var a,n=_createForOfIteratorHelper(document.querySelectorAll(".posts .post.active"));try{for(n.s();!(a=n.n()).done;)a.value.classList.remove("active")}catch(e){n.e(e)}finally{n.f()}e=this.getAttribute("href").slice(1);document.getElementById(e).classList.add("active")}function generateTags(){var e,t=_createForOfIteratorHelper(document.querySelectorAll(optArticleSelector));try{for(t.s();!(e=t.n()).done;){var r,a=e.value,n=a.querySelector(optArticleTagsSelector),o="",l=_createForOfIteratorHelper(a.getAttribute("data-tags").split(" "));try{for(l.s();!(r=l.n()).done;){var c=r.value;o+='<li><a href="#tag-'.concat(c,'">').concat(c,"</a></li> ")}}catch(e){l.e(e)}finally{l.f()}n.innerHTML=o}}catch(e){t.e(e)}finally{t.f()}}function tagClickHandler(e){e.preventDefault();var t,e=this.getAttribute("href").replace("#tag-",""),r=_createForOfIteratorHelper(document.querySelectorAll('a.active[href^="#tag-"]'));try{for(r.s();!(t=r.n()).done;)t.value.classList.remove("active")}catch(e){r.e(e)}finally{r.f()}var a,n=_createForOfIteratorHelper(document.querySelectorAll('a[href="#tag-'.concat(e,'"]')));try{for(n.s();!(a=n.n()).done;)a.value.classList.add("active")}catch(e){n.e(e)}finally{n.f()}generateTitleLinks('[data-tags~="'.concat(e,'"]')),addClickListenersToLinks()}function addClickListenersToLinks(){var e,t=_createForOfIteratorHelper(document.querySelectorAll(".titles a"));try{for(t.s();!(e=t.n()).done;)e.value.addEventListener("click",titleClickHandler)}catch(e){t.e(e)}finally{t.f()}}function addClickListenersToTags(){var e,t=_createForOfIteratorHelper(document.querySelectorAll('a[href^="#tag-"]'));try{for(t.s();!(e=t.n()).done;)e.value.addEventListener("click",tagClickHandler)}catch(e){t.e(e)}finally{t.f()}}function generateAutors(){var e,t="",r=[],a=_createForOfIteratorHelper(document.querySelectorAll(optArticleSelector));try{for(a.s();!(e=a.n()).done;){var n=e.value,o=n.getAttribute("data-author");r.push(o);var l=n.querySelector(optArticleAuthorSelector),t='<a href="#tag-'.concat(o,'">by ').concat(o,"</a>");l.innerHTML=t}}catch(e){a.e(e)}finally{a.f()}t="";var c,i=_createForOfIteratorHelper(_toConsumableArray(new Set(r)));try{for(i.s();!(c=i.n()).done;){var s=c.value;t+='<li><a href="#tag-'.concat(s,'">').concat(s,"</a></li>")}}catch(e){i.e(e)}finally{i.f()}document.querySelector(".list.authors").innerHTML=t}function authorClickHandler(e){e.preventDefault();var t,e=this.getAttribute("href").replace("#tag-",""),r=_createForOfIteratorHelper(document.querySelectorAll('a.active[href^="#tag-"]'));try{for(r.s();!(t=r.n()).done;)t.value.classList.remove("active")}catch(e){r.e(e)}finally{r.f()}var a,n=_createForOfIteratorHelper(document.querySelectorAll('a[href="#tag-'.concat(e,'"]')));try{for(n.s();!(a=n.n()).done;)a.value.classList.add("active")}catch(e){n.e(e)}finally{n.f()}generateTitleLinks('[data-author="'.concat(e,'"]')),addClickListenersToLinks()}function addClickListenersToAuthors(){var e,t=_createForOfIteratorHelper(document.querySelectorAll('a[href^="#tag-"]'));try{for(t.s();!(e=t.n()).done;)e.value.addEventListener("click",authorClickHandler)}catch(e){t.e(e)}finally{t.f()}}generateTitleLinks(),generateTags(),addClickListenersToLinks(),addClickListenersToTags(),generateAutors(),addClickListenersToAuthors();
//# sourceMappingURL=data:application/json;charset=utf8;base64,
